@page "/primes"
@inject IJSRuntime JSRuntime
@using System
@using System.Diagnostics

<h3>Primes</h3>

<input type="number" id="prime" value="@input" @onchange="HandleChange" />
<button @onclick="IsPrime" id="check-prime">Check if prime</button>

<table>
  <thead>
    <tr>
      <th></th>
      <th>Prime</th>
      <th>Duration (ms)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>Wasm</strong></td>
      <td>@(isChecked ? isPrimeWasm : "-")</td>
      <td>@(isChecked ? durationWasm?.TotalMilliseconds : "-")</td>
    </tr>
    <tr>
      <td><strong>JS</strong></td>
      <td>@(isChecked ? isPrimeJs : "-")</td>
      <td>@(isChecked ? durationJs?.TotalMilliseconds : "-")</td>
    </tr>
  </tbody>
</table>

@code {
  private const int defaultPrime = 3991111;
  private int input = defaultPrime;
  private bool isChecked = false;
  private bool isPrimeWasm = false;
  private bool isPrimeJs = false;
  private TimeSpan? durationWasm = null;
  private TimeSpan? durationJs = null;

  private async Task IsPrime()
  {
    var sw = new Stopwatch();

    sw.Start();
    isPrimeWasm = IsPrimeWasm(input);
    sw.Stop();
    durationWasm = sw.Elapsed;

    sw.Restart();
    isPrimeJs = await IsPrimeJs(input);
    sw.Stop();
    durationJs = sw.Elapsed;

    isChecked = true;
  }

  private bool IsPrimeWasm(int value)
  {
    if (value < 2)
    {
      return false;
    }

    for (var i = 2; i < value; i++)
    {
      if (value % i == 0)
      {
        return false;
      }
    }

    return true;
  }

  private async Task<bool> IsPrimeJs(int value)
  {
    return await JSRuntime.InvokeAsync<bool>("isPrime", value);
  }

  private void HandleChange(ChangeEventArgs e)
  {
    isChecked = false;
    durationWasm = null;

    if (e.Value == null)
    {
      input = defaultPrime;
    }
    else if (int.TryParse(e.Value.ToString(), out int result))
    {
      input = result;
    }
    else
    {
      input = defaultPrime;
    }
  }
}